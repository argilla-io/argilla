name: Build package

on:
  release:
    types:
      - "published"

  push:
    branches:
      - "main"
      - "develop"
      - "releases/**"
  pull_request:
    branches:
      - "main"
      - "develop"
      - "releases/**"
      - "feature/**"
      - "feat/**"

jobs:
  test:
    name: Check tests (ElasticSearch)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [8.0, 8.2, 7.14, 7.17]
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout Code üõé
        uses: actions/checkout@v2
      - name: Check affected files
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            python_code:
              - 'src/**'
              - 'tests/**'
            frontend:
              - 'frontend/**'

      - name: Setup ElasticSearch üîé
        if: steps.filter.outputs.python_code == 'true'
        uses: ankane/setup-elasticsearch@v1
        with:
          elasticsearch-version: ${{ matrix.version }}

      - name: Setup Conda Env üêç
        uses: conda-incubator/setup-miniconda@v2
        if: steps.filter.outputs.python_code == 'true'
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: argilla

      - name: Get date for conda cache
        if: steps.filter.outputs.python_code == 'true'
        id: get-date
        run: echo "::set-output name=today::$(/bin/date -u '+%Y%m%d')"
        shell: bash

      - name: Cache Conda env
        if: steps.filter.outputs.python_code == 'true'
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.CONDA }}/envs
          key: conda-${{ runner.os }}--${{ runner.arch }}--${{ steps.get-date.outputs.today }}-${{ hashFiles('environment_dev.yml') }}-${{ env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 2

      - name: Update environment
        if: steps.filter.outputs.python_code == 'true' && steps.cache.outputs.cache-hit != 'true'
        run: mamba env update -n argilla -f environment_dev.yml

      - name: Cache pip üëú
        uses: actions/cache@v2
        if: steps.filter.outputs.python_code == 'true'
        env:
          # Increase this value to reset cache if pyproject.toml has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_NUMBER }}-${{ hashFiles('pyproject.toml') }}

      - name: Set hugginface hub credentials
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/releases')
        env:
          HF_HUB_ACCESS_TOKEN: ${{ secrets.HF_HUB_ACCESS_TOKEN }}
        run: echo "Enable HF access token"

      - name: Run tests üìà
        if: steps.filter.outputs.python_code == 'true'
        run: |
          pytest --cov=argilla --cov-report=xml
          pip install "spacy<3.0" && python -m spacy download en_core_web_sm
          pytest tests/monitoring/test_spacy_monitoring.py
          pip install "cleanlab<2.0"
          pytest tests/labeling/text_classification/test_label_errors.py

      - name: Upload Coverage to Codecov üì¶
        uses: codecov/codecov-action@v1
        if: steps.filter.outputs.python_code == 'true' && matrix.elasticsearch == '8.0'
        with:
          files: ./coverage.xml
          flags: pytest
          fail_ci_if_error: false

  test-opensearch:
    name: Check tests (OpenSearch)
    runs-on: macos-latest
    strategy:
      matrix:
        version: [ 1.3, 2.3 ]
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout Code üõé
        uses: actions/checkout@v2
      - name: Check affected files
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            python_code:
              - 'src/**'
              - 'tests/**'
            frontend:
              - 'frontend/**'

      - name: Setup Conda Env üêç
        uses: conda-incubator/setup-miniconda@v2
        if: steps.filter.outputs.python_code == 'true'
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: argilla

      - name: Get date for conda cache
        if: steps.filter.outputs.python_code == 'true'
        id: get-date
        run: echo "::set-output name=today::$(/bin/date -u '+%Y%m%d')"
        shell: bash

      - name: Cache Conda env
        if: steps.filter.outputs.python_code == 'true'
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.CONDA }}/envs
          key: conda-${{ runner.os }}--${{ runner.arch }}--${{ steps.get-date.outputs.today }}-${{ hashFiles('environment_dev.yml') }}-${{ env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 2

      - name: Update environment
        if: steps.filter.outputs.python_code == 'true' && steps.cache.outputs.cache-hit != 'true'
        run: mamba env update -n argilla -f environment_dev.yml

      - name: Cache pip üëú
        uses: actions/cache@v2
        if: steps.filter.outputs.python_code == 'true'
        env:
          # Increase this value to reset cache if pyproject.toml has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_NUMBER }}-${{ hashFiles('pyproject.toml') }}

      - name: Setup OpenSearch üîé
        if: steps.filter.outputs.python_code == 'true'
        uses: ankane/setup-opensearch@v1
        env:
          ES_JAVA_OPTS: "-Xms2g -Xmx2g"
        with:
          opensearch-version: ${{ matrix.version }}
          config: |
            http.port: 9200

      - name: Run tests üìà
        if: steps.filter.outputs.python_code == 'true'
        run: pytest tests


  build:
    name: Build the python package
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout Code üõé
        uses: actions/checkout@v2

      - name: Cache pip üëú
        uses: actions/cache@v2
        env:
          # Increase this value to reset cache if pyproject.toml has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_NUMBER }}-${{ hashFiles('pyproject.toml') }}

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Build Package üçü
        run: |
          pip install -U build
          scripts/build_distribution.sh

      - name: Upload package artifact
        uses: actions/upload-artifact@v2
        with:
          name: python-package
          path: dist

  deploy_docker:
    name: Build latest docker image
    runs-on: ubuntu-latest
    needs:
      - test
      - test-opensearch
      - build
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout Code üõé
        uses: actions/checkout@v2
      - name: Download python package
        uses: actions/download-artifact@v2
        with:
          name: python-package
          path: dist
      - name: Docker meta
        id: meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: argilla/argilla-server
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.AR_DOCKER_USERNAME }}
          password: ${{ secrets.AR_DOCKER_PASSWORD }}
      - name: Build & push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: release.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # This job will upload a Python Package using Twine when a release is created
  # For more information see:
  # https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries
  deploy_release:
    name: Deploy Release
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' }}
    needs:
      - deploy_docker
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout Code üõé
        uses: actions/checkout@v2
      - name: Download python package
        uses: actions/download-artifact@v2
        with:
          name: python-package
          path: dist
      - name: Publish Package to TestPyPI ü•™
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.AR_TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
      - name: Test Installing üçø
        run: pip install --index-url https://test.pypi.org/simple --no-deps argilla==${GITHUB_REF#refs/*/v}
      - name: Publish Package to PyPI ü•©
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.AR_PYPI_API_TOKEN }}
