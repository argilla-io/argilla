name: Build package

on:
  release:
    types:
      - "published"

  push:
    branches:
      - "main"
      - "develop"
      - "integration"
      - "releases/**"
      - "feature/**"
      - "feat/**"

  pull_request:
    branches:
      - "main"
      - "develop"
      - "releases/**"
      - "feature/**"
      - "feat/**"

env:
  # Increase this value to reset cache if etc/example-environment.yml has not changed
  CACHE_NUMBER:  5
  ALEMBIC_CONFIG: src/argilla/alembic.ini

jobs:

  check_repo_files:
    name: Check source changes
    uses: ./.github/workflows/check-repo-files.yml

  run_tests:
    strategy:
      matrix:
        include:
        - searchEngine: elasticsearch
          searchEngineVersion: 8.8
        - searchEngine: elasticsearch
          searchEngineVersion: 8.0
        - searchEngine: elasticsearch
          searchEngineVersion: 7.17
        - searchEngine: opensearch
          searchEngineVersion: 2.4
        - searchEngine: opensearch
          searchEngineVersion: 1.3

    name: Run base tests
    uses: ./.github/workflows/run-python-tests.yml
    needs:  check_repo_files
    if: needs.check_repo_files.outputs.pythonChanges
    with:
      searchEngine: ${{ matrix.searchEngine }}
      searchEngineVersion: ${{ matrix.searchEngineVersion }}
      pytestArgs: |
        --ignore=tests/training \
        --ignore=tests/client/feedback/training \
        --ignore=tests/monitoring \
        --ignore=tests/listeners
    secrets: inherit

  run_tests_extra:
    name: Run extra tests (training, monitoring and listeners)
    uses: ./.github/workflows/run-python-tests.yml
    needs: check_repo_files
    if: needs.check_repo_files.outputs.pythonChanges
    # continue-on-error: true
    with:
      pytestArgs: |
        tests/training \
        tests/client/feedback/training \
        tests/monitoring \
        tests/listeners
    secrets: inherit

  build_python_package:
    name: Build Argilla python package
    uses: ./.github/workflows/build-python-package.yml
    needs:  check_repo_files
    if: needs.check_repo_files.outputs.buildChanges
    secrets: inherit

  deploy_docker:
    name: Build docker image
    runs-on: ubuntu-latest
    needs:
      - check_repo_files
      - build_python_package
      - run_tests
      - run_tests_extra
    env:
      IS_DEPLOYABLE: ${{ secrets.AR_DOCKER_USERNAME != '' }}
    if: needs.check_repo_files.outputs.buildChanges
    strategy:
      matrix:
        include:
          - image: argilla/argilla-server
            dockerfile: docker/Dockerfile
            readme: README.md
            platforms: linux/amd64

          - image: argilla/argilla-quickstart
            dockerfile: docker/quickstart.Dockerfile
            readme: docker/quickstart.README.md
            platforms: linux/amd64,linux/arm64
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout Code üõé
        uses: actions/checkout@v2
        if: env.IS_DEPLOYABLE == 'true'
      - name: Download python package
        uses: actions/download-artifact@v2
        with:
          name: python-package
          path: docker/dist
        if: env.IS_DEPLOYABLE == 'true'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: env.IS_DEPLOYABLE == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        if: env.IS_DEPLOYABLE == 'true'
      - name: Docker meta
        id: meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ${{ matrix.image }}
        if: env.IS_DEPLOYABLE == 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.AR_DOCKER_USERNAME }}
          password: ${{ secrets.AR_DOCKER_PASSWORD }}
        if: env.IS_DEPLOYABLE == 'true'
      - name: Build & push Docker image
        uses: docker/build-push-action@v2
        with:
          context: docker
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
        if: env.IS_DEPLOYABLE == 'true'
      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        if: github.event_name == 'release' && env.IS_DEPLOYABLE == 'true'
        with:
          username: ${{ secrets.AR_DOCKER_USERNAME }}
          password: ${{ secrets.AR_DOCKER_PASSWORD }}
          repository: ${{ matrix.image }}
          readme-filepath: ${{ matrix.readme }}

  # This job will upload a Python Package using Twine when a release is created
  # For more information see:
  # https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries
  deploy_release:
    name: Deploy Release
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' }}
    needs:
      - deploy_docker
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout Code üõé
        uses: actions/checkout@v2
      - name: Download python package
        uses: actions/download-artifact@v2
        with:
          name: python-package
          path: dist
      - name: Publish Package to TestPyPI ü•™
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.AR_TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
      - name: Test Installing üçø
        run: pip install --index-url https://test.pypi.org/simple --no-deps argilla==${GITHUB_REF#refs/*/v}
      - name: Publish Package to PyPI ü•©
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.AR_PYPI_API_TOKEN }}
